#!/bin/bash

set -euo pipefail

export KO_LOG=info 
export VERSION="${VERSION:-v0.1.0}"
export GIT_COMMIT="${GIT_COMMIT:-dev}"
export BUILD_DATE=$(date -u +%FT%TZ)

# Ensure go.work file exists
if [ ! -f go.work ]; then
  go work init
  go work use \
    ./fault-quarantine-module \
    ./fault-remediation-module \
    ./health-events-analyzer \
    ./health-monitors/csp-health-monitor \
    ./labeler-module \
    ./node-drainer-module \
    ./platform-connectors
fi

ko build -B --image-refs=digests.txt --sbom=cyclonedx --tags="${VERSION}-slim" \
  ./fault-quarantine-module \
  ./fault-remediation-module \
  ./health-events-analyzer \
  ./health-monitors/csp-health-monitor/cmd/csp-health-monitor \
  ./health-monitors/csp-health-monitor/cmd/maintenance-notifier \
  ./labeler-module \
  ./node-drainer-module \
  ./platform-connectors 

echo "built refs:"
cat digests.txt

# digests.txt has: ghcr.io/nvidia/nvsentinel-fault-quarantine-module:v0.1.0-slim@sha256:9168...
# for attestation matrix we need subject-name WITHOUT tag, and the digest.
jq -R -s '
  split("\n")
  | map(select(length>0))
  | map({
      name: (   split("@")[0] | sub(":[^@]+$"; "") ),
      digest: ( split("@")[1] )
    })
' digests.txt | tee images.json

# Export images.json content to GitHub Actions output
echo "images=$(jq -c . images.json)" >> "$GITHUB_OUTPUT"